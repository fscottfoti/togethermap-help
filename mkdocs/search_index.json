{
    "docs": [
        {
            "location": "/", 
            "text": "TogetherMap: Collaborative Mapping for Web and Mobile\n\n\nThe Name\n\n\nWhat does TM mean?\n\n\nTM is shorthand for TogetherMap.  TM brings mapping and spatial data into a modern web and mobile app, which enables you to reach more users and to reach users in a more collaborative way.  If you think of shapefiles-meets-google-docs you have the right idea.\n\n\nMission\n\n\nWhat is the purpose of TM?\n\n\nGenerally, our mission is to provide an app for people to participate in the change that's happening in their communities; ways we think this might happen are through data collection or chat associated with places.  Along the way we realized we were building a pretty useful multi-user environment for data collection and spatial data visualization, so we'll try out a few things and see what sticks.  Example use cases are up next.\n\n\nExamples\n\n\nSimple collections of places, like saving your favorite parks.\n\n\n\n\n\n\nLoading scraped web data of recent condo developments in San Francisco and talking about them.\n\n\n\n\n\n\nCollecting data about places using simple web forms.\n\n\n\n\n\n\nWorldwide use, like this collection of condo developments in Korea.\n\n\n\n\n\n\nCustom theming and filtering of spatial data, and the ability for the user to switch themes and filters in order to explore spatial data.", 
            "title": "Home"
        }, 
        {
            "location": "/#togethermap-collaborative-mapping-for-web-and-mobile", 
            "text": "", 
            "title": "TogetherMap: Collaborative Mapping for Web and Mobile"
        }, 
        {
            "location": "/#the-name", 
            "text": "What does TM mean?  TM is shorthand for TogetherMap.  TM brings mapping and spatial data into a modern web and mobile app, which enables you to reach more users and to reach users in a more collaborative way.  If you think of shapefiles-meets-google-docs you have the right idea.", 
            "title": "The Name"
        }, 
        {
            "location": "/#mission", 
            "text": "What is the purpose of TM?  Generally, our mission is to provide an app for people to participate in the change that's happening in their communities; ways we think this might happen are through data collection or chat associated with places.  Along the way we realized we were building a pretty useful multi-user environment for data collection and spatial data visualization, so we'll try out a few things and see what sticks.  Example use cases are up next.", 
            "title": "Mission"
        }, 
        {
            "location": "/#examples", 
            "text": "Simple collections of places, like saving your favorite parks.    Loading scraped web data of recent condo developments in San Francisco and talking about them.    Collecting data about places using simple web forms.    Worldwide use, like this collection of condo developments in Korea.    Custom theming and filtering of spatial data, and the ability for the user to switch themes and filters in order to explore spatial data.", 
            "title": "Examples"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Places, Votes, and Comments\n\n\nI see places, votes, and comments mentioned a lot - what are those?\n\n\nPlaces are just shapes on the map.  They can be markers, lines, or free-form shapes.  We come from a GIS (Geographic Information Systems) background but we're hoping to conceptualize spatial data in a slightly more web-friendly way.\n\n\nVotes allow you to up and down-vote places within a collection, so you can keep track of consensus of a group, for instance.\n\n\nComments are responses about a given place, similar to any other web comment board, except with a focus on a particular place.\n\n\nCollections\n\n\nI hear the word collection mentioned a lot - what's that?\n\n\nCollections are a way to organize your places into groups which have a common theme.  A number of concepts are tied to collections including permissions, theming of how places appear both in the sidebar and on the map, and a few others things we'll get to later.  Collections are similar to a \"board\" in Pinterest or a \"layer\" in GIS.  \n\n\nOne key feature of TM is to store many collections in the same system and to be able to search across collections - for instance, to find all the places near you, no matter the collection they are a part of.  \n\n\nNonetheless, a great many use cases involve collecting place data within a single collection, and we will make sure to provide access to that functionality in the simplest way possible without complicating things with the greater possibilities provided by TM.\n\n\nGetting Started\n\n\nSo, what's the best way to get started?\n\n\nMy favorite basic use case is to collect places I want to remember - e.g. a set of coffee shops I might want to go to.  So let's assume you and a few friends want to build a collection of the best coffee shops for working in San Francisco.\n\n\n\n\n\n\nFirst move the map to San Francisco (or to wherever you are) by searching for a nearby location using the magnifying glass button on the map (similar to what you would do with Google Maps), or just drag the map to your preferred location.\n\n\n\n\n\n\nNext make a new collection by opening the side menu (using the triple bars, called the \"Hamburger\") and \"New\".  This creates a new collection with the default name, which you can change to \"Fave Coffee\" or something similar.  You can also move the map around a bit to your preferred default view for this collection and click the \"devault view\" button (the triangle rotated to the right) to save the current map as the default view.\n\n\nClick the left arrow to go the collection page for this collection.  In TM everything is saved automatically as you change things (so be sure to change it back if you didn't intend the change).\n\n\n\n\n\n\nNext add places to the map using the \"draw\" tool in the lower left hand corner.  Click on the small button that is 3rd from the bottom (the one that looks like a marker).  This is the \"add marker\" button.  Once you click you will have a marker attached to the cursor and you can move this marker to any location on the map and click to drop the marker.  \n\n\nThis will take you to the \"place edit\" page where you can change the name and add a description of this coffee shop, or maybe add a photo.  Continue adding places  until you have several coffee shops, and keep in mind that you can share this map with others and they can contibute to build a map of yo\n\n\nOn mobile this is even easier, but a little bit different.\n  See \"Adding Places on Mobile\" under \"The Basics.\"", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting_started/#places-votes-and-comments", 
            "text": "I see places, votes, and comments mentioned a lot - what are those?  Places are just shapes on the map.  They can be markers, lines, or free-form shapes.  We come from a GIS (Geographic Information Systems) background but we're hoping to conceptualize spatial data in a slightly more web-friendly way.  Votes allow you to up and down-vote places within a collection, so you can keep track of consensus of a group, for instance.  Comments are responses about a given place, similar to any other web comment board, except with a focus on a particular place.", 
            "title": "Places, Votes, and Comments"
        }, 
        {
            "location": "/getting_started/#collections", 
            "text": "I hear the word collection mentioned a lot - what's that?  Collections are a way to organize your places into groups which have a common theme.  A number of concepts are tied to collections including permissions, theming of how places appear both in the sidebar and on the map, and a few others things we'll get to later.  Collections are similar to a \"board\" in Pinterest or a \"layer\" in GIS.    One key feature of TM is to store many collections in the same system and to be able to search across collections - for instance, to find all the places near you, no matter the collection they are a part of.    Nonetheless, a great many use cases involve collecting place data within a single collection, and we will make sure to provide access to that functionality in the simplest way possible without complicating things with the greater possibilities provided by TM.", 
            "title": "Collections"
        }, 
        {
            "location": "/getting_started/#getting-started", 
            "text": "So, what's the best way to get started?  My favorite basic use case is to collect places I want to remember - e.g. a set of coffee shops I might want to go to.  So let's assume you and a few friends want to build a collection of the best coffee shops for working in San Francisco.    First move the map to San Francisco (or to wherever you are) by searching for a nearby location using the magnifying glass button on the map (similar to what you would do with Google Maps), or just drag the map to your preferred location.    Next make a new collection by opening the side menu (using the triple bars, called the \"Hamburger\") and \"New\".  This creates a new collection with the default name, which you can change to \"Fave Coffee\" or something similar.  You can also move the map around a bit to your preferred default view for this collection and click the \"devault view\" button (the triangle rotated to the right) to save the current map as the default view.  Click the left arrow to go the collection page for this collection.  In TM everything is saved automatically as you change things (so be sure to change it back if you didn't intend the change).    Next add places to the map using the \"draw\" tool in the lower left hand corner.  Click on the small button that is 3rd from the bottom (the one that looks like a marker).  This is the \"add marker\" button.  Once you click you will have a marker attached to the cursor and you can move this marker to any location on the map and click to drop the marker.    This will take you to the \"place edit\" page where you can change the name and add a description of this coffee shop, or maybe add a photo.  Continue adding places  until you have several coffee shops, and keep in mind that you can share this map with others and they can contibute to build a map of yo  On mobile this is even easier, but a little bit different.   See \"Adding Places on Mobile\" under \"The Basics.\"", 
            "title": "Getting Started"
        }, 
        {
            "location": "/hooked/", 
            "text": "OK, if you're following along you will have a collection with a few coffee shops added at this point.  Nice work.  But what's the big deal about TogetherMap?  There's literally 100s of mapping apps out there, right?  Is this just another mapping app?\n\n\nGrab a Friend\n\n\nThe fun of TogetherMap is the collaborative spirit of mapping in real time.  We've all used Google Docs at this point - well, real time collaboration is quickly becoming a commodity on the internet and yet there's no map app that I know of that's done this real time functionality for maps.\n\n\nDo you have that friend yet?  If you don't have that friend handy, you can open up a second browser, get your cell phone, or whatever.  The point is - when you add a place in TM, anyone else following that collection gets the update immediately (without a reload), and can respond with their own edits.  \n\n\nThis is true almost everywhere in TM.  Comments are made in real time on places (like a chatroom), collection lists are refreshed on-the-fly, and even users accepting permissions are updated instantly.  Grab 100s of friends if you have that many, and watch the map come to life.  \n\n\nPlace-based Conversations\n\n\nA big part of that is place-based commenting.  It's a pretty simple addition to an idea that's everywhere on the web.  Basically you have a conversation thread tied to each and every place you make.", 
            "title": "Getting Hooked"
        }, 
        {
            "location": "/hooked/#grab-a-friend", 
            "text": "The fun of TogetherMap is the collaborative spirit of mapping in real time.  We've all used Google Docs at this point - well, real time collaboration is quickly becoming a commodity on the internet and yet there's no map app that I know of that's done this real time functionality for maps.  Do you have that friend yet?  If you don't have that friend handy, you can open up a second browser, get your cell phone, or whatever.  The point is - when you add a place in TM, anyone else following that collection gets the update immediately (without a reload), and can respond with their own edits.    This is true almost everywhere in TM.  Comments are made in real time on places (like a chatroom), collection lists are refreshed on-the-fly, and even users accepting permissions are updated instantly.  Grab 100s of friends if you have that many, and watch the map come to life.", 
            "title": "Grab a Friend"
        }, 
        {
            "location": "/hooked/#place-based-conversations", 
            "text": "A big part of that is place-based commenting.  It's a pretty simple addition to an idea that's everywhere on the web.  Basically you have a conversation thread tied to each and every place you make.", 
            "title": "Place-based Conversations"
        }, 
        {
            "location": "/basics/", 
            "text": "A Tour of the UI\n\n\nMost of the basic menu operations happen by clicking the \"Hamburger\" in the upper left of the navbar.  This pulls out a left-side menu like many mobile sites.  You can then click \"Collections\" to get access to the list of collections, or \"New\" for a new colleciton, or \"Import\" to bring in external shape data.\n\n\nYou also login using the left-hand side menu.  You must be logged in to create or edit content on TM so we can associate your data with your account.  If you're logged in to a private collection, we'll make every effort to keep your data secure (assuming you don't make the collection public).\n\n\nThe Map View\n\n\nThe map view has a few small widgets which control the map pane.  Along the right hand side is the \"sidebar\" which fills with content depending on your most recently performed action.  Most of the basemaps use data from \nOpenStreetMap\n.\n\n\nAlong the left hand side are the zoom in and zoom out buttons and the geocoding widget.  The geocoder lets you put in an address and when you select a matching address takes you to that location.\n\n\nCollection Page\n\n\nNavigation typically happens by clicking \"Collections\" from the left-side menu.  You can then browse to collections you own, collections you follow, and other public collections (which are kept in the gallery).  When a collection is clicked, you get up to 100 places in the map view for that collection (the one's closest to the map center), and the sidebar contains a description of the collection.  If there are more than 100 places in the map view where you are, you might need to pan around to load more places.  \n\n\nIf you click the button for \"Recent\" you will get the most recent comments for the collection (to get recent places, click the sort button and \"recent\" to sort by the most recent places).\n\n\nIf you have \"owner\" permissions on the collection, you will be able to edit the collection configuration and set the permissions, which will be explained in the \ncustomization\n and \npermissions\n pages respectively.  \n\n\nIf you do \nnot\n own the collection, you will have the option to follow the collection, and if you are already following the collection you will have the option to unfollow the collection.  \n\n\nThe collection page also includes a scrollable list of all the places currently loaded for the collection.  Whenever you mouse over the \"card\" for a place, that place will be highlighted with a darker color in the map view.  Additionally, if the place is a marker it will bounce to show you which place this \"card\" represents on the map.  You can also click the location arrow in the upper right hand corner to pan to the place, and click again to zoom in on the place.\n\n\nPlace Pages\n\n\nClick on a place, either in the map view or in the place list in the collection view, and you will arrive on the place page.  The place page mainly is to provide the place (pun intended) to have a conversation about the place.  \n\n\nBelow the place description is a list of current comments about this place.  From this page you can also vote the place up or down or edit the place properties, including marker icon, color, and size (small, medium, and large), as well as set a default image for the place.\n\n\nAdding Places\n\n\nIf you have place adding permissions for a given collection (which you always have if you created or own the collection), then you will see a toolbar at the bottom left hand corner of the map (you will not see this toolbar if you don't have permissions).  From the bottom, the icons are for delete, edit, marker add, polygon add, and line add.  The last 3 add the main 3 kinds of shapes in any geographic information system and TM is no expection.\n\n\nTM uses the wonderful library \nLeaflet\n as it's mapping library, and this drawing toolbar is the \nLeaflet Draw\n widget.  A pretty great blog to understand the breadth of this plugin is provided \nhere\n.\n\n\nBut we think its use is pretty simple.  The shape creation buttons use tooltips to show how to use them.  As a quick reminder, click the last point twice to finish drawing a line, and click the first point a second time to close a polygon.\n\n\nIf you click the edit button on the toolbar, you now enter a mode where you can drag any marker on the map to a new location, which is always fun but use wisely.  The delete button allows you to remove places from the map with a click.  The should \ndefinitely\n be used wisely.  Places can also be deleted by clicking the edit button on the place page and then the delete button.  As a reminder, only owners of the collection or the creators of each place will have the permissions to delete each place.\n\n\nAdding Places Redux\n\n\nThere are two other super easy ways to add places.  If you're on the desktop, just right click and use the context menu to add a place.  Or you can click on \"Settings\" in the left-side menu (or just Ctrl-d) to turn double clicking into marker adding (as opposed to its default function, which is to zoom in).\n\n\nAdding Places on Mobile\n\n\nIf you're on mobile, this all gets simpler, but less powerful.  On mobile, when you have place adding permissions you can only add markers, and there will be a single button on the map with the marker icon to add a place.  Once you click this button, a marker will \"float\" in the middle of the map; move the map until the marker is in the appropriate location and click the save button (or the \"x\" to cancel adding the marker).", 
            "title": "The Basics"
        }, 
        {
            "location": "/basics/#a-tour-of-the-ui", 
            "text": "Most of the basic menu operations happen by clicking the \"Hamburger\" in the upper left of the navbar.  This pulls out a left-side menu like many mobile sites.  You can then click \"Collections\" to get access to the list of collections, or \"New\" for a new colleciton, or \"Import\" to bring in external shape data.  You also login using the left-hand side menu.  You must be logged in to create or edit content on TM so we can associate your data with your account.  If you're logged in to a private collection, we'll make every effort to keep your data secure (assuming you don't make the collection public).", 
            "title": "A Tour of the UI"
        }, 
        {
            "location": "/basics/#the-map-view", 
            "text": "The map view has a few small widgets which control the map pane.  Along the right hand side is the \"sidebar\" which fills with content depending on your most recently performed action.  Most of the basemaps use data from  OpenStreetMap .  Along the left hand side are the zoom in and zoom out buttons and the geocoding widget.  The geocoder lets you put in an address and when you select a matching address takes you to that location.", 
            "title": "The Map View"
        }, 
        {
            "location": "/basics/#collection-page", 
            "text": "Navigation typically happens by clicking \"Collections\" from the left-side menu.  You can then browse to collections you own, collections you follow, and other public collections (which are kept in the gallery).  When a collection is clicked, you get up to 100 places in the map view for that collection (the one's closest to the map center), and the sidebar contains a description of the collection.  If there are more than 100 places in the map view where you are, you might need to pan around to load more places.    If you click the button for \"Recent\" you will get the most recent comments for the collection (to get recent places, click the sort button and \"recent\" to sort by the most recent places).  If you have \"owner\" permissions on the collection, you will be able to edit the collection configuration and set the permissions, which will be explained in the  customization  and  permissions  pages respectively.    If you do  not  own the collection, you will have the option to follow the collection, and if you are already following the collection you will have the option to unfollow the collection.    The collection page also includes a scrollable list of all the places currently loaded for the collection.  Whenever you mouse over the \"card\" for a place, that place will be highlighted with a darker color in the map view.  Additionally, if the place is a marker it will bounce to show you which place this \"card\" represents on the map.  You can also click the location arrow in the upper right hand corner to pan to the place, and click again to zoom in on the place.", 
            "title": "Collection Page"
        }, 
        {
            "location": "/basics/#place-pages", 
            "text": "Click on a place, either in the map view or in the place list in the collection view, and you will arrive on the place page.  The place page mainly is to provide the place (pun intended) to have a conversation about the place.    Below the place description is a list of current comments about this place.  From this page you can also vote the place up or down or edit the place properties, including marker icon, color, and size (small, medium, and large), as well as set a default image for the place.", 
            "title": "Place Pages"
        }, 
        {
            "location": "/basics/#adding-places", 
            "text": "If you have place adding permissions for a given collection (which you always have if you created or own the collection), then you will see a toolbar at the bottom left hand corner of the map (you will not see this toolbar if you don't have permissions).  From the bottom, the icons are for delete, edit, marker add, polygon add, and line add.  The last 3 add the main 3 kinds of shapes in any geographic information system and TM is no expection.  TM uses the wonderful library  Leaflet  as it's mapping library, and this drawing toolbar is the  Leaflet Draw  widget.  A pretty great blog to understand the breadth of this plugin is provided  here .  But we think its use is pretty simple.  The shape creation buttons use tooltips to show how to use them.  As a quick reminder, click the last point twice to finish drawing a line, and click the first point a second time to close a polygon.  If you click the edit button on the toolbar, you now enter a mode where you can drag any marker on the map to a new location, which is always fun but use wisely.  The delete button allows you to remove places from the map with a click.  The should  definitely  be used wisely.  Places can also be deleted by clicking the edit button on the place page and then the delete button.  As a reminder, only owners of the collection or the creators of each place will have the permissions to delete each place.", 
            "title": "Adding Places"
        }, 
        {
            "location": "/basics/#adding-places-redux", 
            "text": "There are two other super easy ways to add places.  If you're on the desktop, just right click and use the context menu to add a place.  Or you can click on \"Settings\" in the left-side menu (or just Ctrl-d) to turn double clicking into marker adding (as opposed to its default function, which is to zoom in).", 
            "title": "Adding Places Redux"
        }, 
        {
            "location": "/basics/#adding-places-on-mobile", 
            "text": "If you're on mobile, this all gets simpler, but less powerful.  On mobile, when you have place adding permissions you can only add markers, and there will be a single button on the map with the marker icon to add a place.  Once you click this button, a marker will \"float\" in the middle of the map; move the map until the marker is in the appropriate location and click the save button (or the \"x\" to cancel adding the marker).", 
            "title": "Adding Places on Mobile"
        }, 
        {
            "location": "/images/", 
            "text": "Images\n\n\nIf Pinterest has taught us anything, it's that images are the lifeblood of the web, and TogetherMap has several bits of functionality to make assocating images with places and collections fairly easy.  We highly reccommend adding images wherever possible in TM to liven things up a bit, but this depends on the use case somewhat.  \n\n\nThe easiest way to add images to TM is by clicking the image button on every collection edit or place edit page.  When you click this button, this will open up the image selection dialog that is provided to us by \nfilepicker.com\n.  This part should be fairly easy to figure out, but note that filepicker connects you to your account for Box, Dropbox, Facebook, Google Drive, Flickr, Instagram, and Picasa all within this easy-to-use interface.  \n\n\nNote that this does \nnot\n give us access to your accounts, you simply choose which content you want to move to TM so that you can organize and view it on a map.\n\n\nOther Image Sources\n\n\nNot to be underestimated is the \"web images\" option which allows you to quickly do a web search for images and find a picture of a place to add to TM.\n\n\nIf you already know of an image on the web (or prefer using the Google image search), you can use the \"link\" option.  \n\n\nAlso keep in mind that if you go to to TM on mobile, you can use filepicker to upload directly from your phone's camera, which is by far the easiest option available for map based travel diaries.", 
            "title": "Images"
        }, 
        {
            "location": "/images/#images", 
            "text": "If Pinterest has taught us anything, it's that images are the lifeblood of the web, and TogetherMap has several bits of functionality to make assocating images with places and collections fairly easy.  We highly reccommend adding images wherever possible in TM to liven things up a bit, but this depends on the use case somewhat.    The easiest way to add images to TM is by clicking the image button on every collection edit or place edit page.  When you click this button, this will open up the image selection dialog that is provided to us by  filepicker.com .  This part should be fairly easy to figure out, but note that filepicker connects you to your account for Box, Dropbox, Facebook, Google Drive, Flickr, Instagram, and Picasa all within this easy-to-use interface.    Note that this does  not  give us access to your accounts, you simply choose which content you want to move to TM so that you can organize and view it on a map.", 
            "title": "Images"
        }, 
        {
            "location": "/images/#other-image-sources", 
            "text": "Not to be underestimated is the \"web images\" option which allows you to quickly do a web search for images and find a picture of a place to add to TM.  If you already know of an image on the web (or prefer using the Google image search), you can use the \"link\" option.    Also keep in mind that if you go to to TM on mobile, you can use filepicker to upload directly from your phone's camera, which is by far the easiest option available for map based travel diaries.", 
            "title": "Other Image Sources"
        }, 
        {
            "location": "/permissions/", 
            "text": "Accessing Permissions\n\n\nPermissions are accessed by going to the collection page and clicking on edit and then clicking on the button for permissions (the eye with a line through it).  Only collection creators and those with owner permissions can change permissions on a collection.\n\n\nKinds of Permissions\n\n\nThere are 4 kinds of permissions in TM.\n\n\n\n\nowners\n\n\nplace writers (placers for short)\n\n\npost writers (posters for short)\n\n\nreaders\n\n\n\n\nOwners can edit collection attributes and set permissions, place writers can add places to a collection, post writers cannot add places but can make comments and vote, and readers can only browse a collection but cannot add or edit any content.\n\n\nNote that these permissions are hierarchical, i.e. all place writers are post writers and all post writers are readers and all owners have all available permissions.\n\n\nMaking a Collection Private\n\n\nAfter clicking the permissions button, you will see 4 buttons for each of the 4 kinds of permissions.  Click each button to see the current permission settings for that type of permission.\n\n\nBy default, when created all collections are \"anyone with a link can view,\" but you must add users explicitely in order to allow posting and place making.\n\n\nPrivate collections are hierarchical in the opposite order, i.e. post private collections are all place private and read private collections are all post private.  So if you wanted to allow public contribution of places, click \"public\" on the posting and placing tabs.\n\n\nConfiguring a Private Collection\n\n\nIf a collection is private for a given permission type you will see widgets to configure permissions.\n\n\nAt the top you will see a list of users that have that permission, each with a remove button which would revoke that permission.\n\n\nGiving permissions roughly works the same as Google Docs - i.e. send links to people to whom you want to give the permission.  To get the link that bestows a given kind of permission, just click the \"link\" button and the link will be copied to the clipboard for you to, most likely, paste into an email to send to a collaborator.  \n\n\nAdditionally you can click the \"generate\" button to generate a new link if you think someone has access to the link that should not have access, which will invalidate all previous links for this permission (it does not invalidate users who have already accepted the permission; it just invalidates the link).  \n\n\nFinally, at the bottom will be a button to make the collection \"public\" again.\n\n\nNote: public owner collections do not exist - you must give ownership explicitely.\n\n\nAccepting Permissions\n\n\nWhen a user clicks on the link that is copied above (to provide a given permission), they will be taken to a page in TM which provides the description of the collection, allows the user to login, at which point they can click on an \"accept\" button which bestows the permission.  When a permission is accepted the collection is automatically followed for that user.\n\n\nLogin Not Required for Read Access\n\n\nAs a small caveat, read access by default does not require the user to login and \"accept\" permissions.  This is similar to Google Docs, where anyone with a link can view.  \n\n\nIn TM though, for a person to edit a place or make a post to a private collection, they must be logged in and \"accept\" the permissions.  \n\n\nAn additional button is provided for read permissions to change the default to require that a user be logged in and accept read permission (in this way the user can be tracked and the permission revoked, although this is not common).", 
            "title": "Permissions"
        }, 
        {
            "location": "/permissions/#accessing-permissions", 
            "text": "Permissions are accessed by going to the collection page and clicking on edit and then clicking on the button for permissions (the eye with a line through it).  Only collection creators and those with owner permissions can change permissions on a collection.", 
            "title": "Accessing Permissions"
        }, 
        {
            "location": "/permissions/#kinds-of-permissions", 
            "text": "There are 4 kinds of permissions in TM.   owners  place writers (placers for short)  post writers (posters for short)  readers   Owners can edit collection attributes and set permissions, place writers can add places to a collection, post writers cannot add places but can make comments and vote, and readers can only browse a collection but cannot add or edit any content.  Note that these permissions are hierarchical, i.e. all place writers are post writers and all post writers are readers and all owners have all available permissions.", 
            "title": "Kinds of Permissions"
        }, 
        {
            "location": "/permissions/#making-a-collection-private", 
            "text": "After clicking the permissions button, you will see 4 buttons for each of the 4 kinds of permissions.  Click each button to see the current permission settings for that type of permission.  By default, when created all collections are \"anyone with a link can view,\" but you must add users explicitely in order to allow posting and place making.  Private collections are hierarchical in the opposite order, i.e. post private collections are all place private and read private collections are all post private.  So if you wanted to allow public contribution of places, click \"public\" on the posting and placing tabs.", 
            "title": "Making a Collection Private"
        }, 
        {
            "location": "/permissions/#configuring-a-private-collection", 
            "text": "If a collection is private for a given permission type you will see widgets to configure permissions.  At the top you will see a list of users that have that permission, each with a remove button which would revoke that permission.  Giving permissions roughly works the same as Google Docs - i.e. send links to people to whom you want to give the permission.  To get the link that bestows a given kind of permission, just click the \"link\" button and the link will be copied to the clipboard for you to, most likely, paste into an email to send to a collaborator.    Additionally you can click the \"generate\" button to generate a new link if you think someone has access to the link that should not have access, which will invalidate all previous links for this permission (it does not invalidate users who have already accepted the permission; it just invalidates the link).    Finally, at the bottom will be a button to make the collection \"public\" again.  Note: public owner collections do not exist - you must give ownership explicitely.", 
            "title": "Configuring a Private Collection"
        }, 
        {
            "location": "/permissions/#accepting-permissions", 
            "text": "When a user clicks on the link that is copied above (to provide a given permission), they will be taken to a page in TM which provides the description of the collection, allows the user to login, at which point they can click on an \"accept\" button which bestows the permission.  When a permission is accepted the collection is automatically followed for that user.", 
            "title": "Accepting Permissions"
        }, 
        {
            "location": "/permissions/#login-not-required-for-read-access", 
            "text": "As a small caveat, read access by default does not require the user to login and \"accept\" permissions.  This is similar to Google Docs, where anyone with a link can view.    In TM though, for a person to edit a place or make a post to a private collection, they must be logged in and \"accept\" the permissions.    An additional button is provided for read permissions to change the default to require that a user be logged in and accept read permission (in this way the user can be tracked and the permission revoked, although this is not common).", 
            "title": "Login Not Required for Read Access"
        }, 
        {
            "location": "/extras/", 
            "text": "Search\n\n\nWhen the user clicks the \"Hamburger\" and \"Search\", a search will be performed for places in the map view.  (This is an option when deploying TM so might not occur in all TM instances.)  At the time of this writing, search will search places in any collection for which the user has read permissions, but will only search the \"name\" attribute.  Improving search to be more general is one of the planned tasks for improving TM.\n\n\nSettings\n\n\nThe follow settings can be configured in TM:\n\n\n\n\n\n\nthe meaning of double clicking the map (as mentined in the \nAdding Places Redux\n) can be changed from \"zoom in\" to \"add place\" and back.\n\n\n\n\n\n\nthe \"pan to place\" setting which when enabled will pan to each place as you hover the mouse over the \"card\" in the Collection page.  Normally the place will be highlighted, but this enables you to quickly pan to the place if it's not shown in the current map view.\n\n\n\n\n\n\nEmail updates\n\n\nAt this time, email updates are sent as nightly digest emails.  An email will arrive in your inbox each morning with the 10 most recent places and comments which occurred in each of the collections you own or follow.\n\n\nIf no updates were made in the previous 24 hours on your collections, no email will be sent.  In this way, emails are used to alert the user whenever there has been activity on one of their collections.\n\n\nAdditional configuration options for email will be implemented and made available in the future.", 
            "title": "Extras"
        }, 
        {
            "location": "/extras/#search", 
            "text": "When the user clicks the \"Hamburger\" and \"Search\", a search will be performed for places in the map view.  (This is an option when deploying TM so might not occur in all TM instances.)  At the time of this writing, search will search places in any collection for which the user has read permissions, but will only search the \"name\" attribute.  Improving search to be more general is one of the planned tasks for improving TM.", 
            "title": "Search"
        }, 
        {
            "location": "/extras/#settings", 
            "text": "The follow settings can be configured in TM:    the meaning of double clicking the map (as mentined in the  Adding Places Redux ) can be changed from \"zoom in\" to \"add place\" and back.    the \"pan to place\" setting which when enabled will pan to each place as you hover the mouse over the \"card\" in the Collection page.  Normally the place will be highlighted, but this enables you to quickly pan to the place if it's not shown in the current map view.", 
            "title": "Settings"
        }, 
        {
            "location": "/extras/#email-updates", 
            "text": "At this time, email updates are sent as nightly digest emails.  An email will arrive in your inbox each morning with the 10 most recent places and comments which occurred in each of the collections you own or follow.  If no updates were made in the previous 24 hours on your collections, no email will be sent.  In this way, emails are used to alert the user whenever there has been activity on one of their collections.  Additional configuration options for email will be implemented and made available in the future.", 
            "title": "Email updates"
        }, 
        {
            "location": "/customization/", 
            "text": "Customization\n\n\nAll the customization discussed here will be made on the collection settings page, which can be reached by clicking the \"Edit\" icon on the collection page.  The \"Edit\" icon will only be avialable if you have owner permissions on the collection.  Once you're on the \"Edit\" page you will need to click the down arrow at the bottom of the page to get to the expert settings discussed here.\n\n\nAs a word of warning, a modest amount of programming is requried to customize the templates in TogetherMap.  As you will soon see, some of the basics can be done with modest amount of programming knowledge, and with the framework described here you can do some very powerful things in TM.\n\n\nShapefiles\n\n\nShapefiles are the lifeblood of GIS.  Although TM isn't GIS, we can start with shapefiles because shapefiles are the most common way to 1) define a shape and 2) associate attributes with a shape.  In our example, let's say we have a set of shapes, each of which has a name, description, and image url.\n\n\nIt's worth digressing here to point out that executing a couple of provided Python scripts is the easiest way to get shapefiles into and out of TM (and is required for large shapefiles).  This is documented on the \nGitHub Page\n.\n\n\nJSON\n\n\nInstead of shapefiles, the vernacular of the web is JSON.  JSON is essentially a Javascript object which is a key value dictionary that is human readable.  For our example, you need only deal with one object at a time.  TogetherMap takes care of reading the places from the database, synchronizing updates between users and many other things.  Here is a sample place.\n\n\n{\n    shape: [-37.7792, 122.4191],\n    name: \nSan Francisco City Hall\n,\n    description: \nThis is the City Hall of SF\n,\n    image_url: \nhttp://imgur.com/ABCD\n\n}\n\n\n\n\nGeoJSON\n\n\nOK, that's easy enough, but what about the shape arribute?  In fact, there is a whole specification for representing shapes in JSON called \nGeoJSON\n and this is the preferred way to represent shapes on the web rather than shapefiles.  TM uses GeoJSON.  With TM, you will never, ever have to know how shapes are stored.  TM does this for you.  You only need to know how to turn the attributes into text or into marker themes.\n\n\nJSON in TM\n\n\nLet's imagine a coworker sent you a shapefile and you imported it into TM.  You don't even really know what attributes are in the shapefile.  Worry not.  Once the data is in TM, that is now our problem.  Under the first text area is a button with a \"code\" icon on it.  Click it and it will give you a formatted sample object from this collection.  One is printed below so that you won't be too worried when you see a place with it's full complexity.  \n\n\nSo what do you need to know about this?  Not as much as you'd think.  The magic is all in the \"properties\" sub-dictionary, and you will see \"properties\" come up a lot in TM templates.  \"properties\" is part of the GeoJSON spec and allows us to conform with existing conventions - this is where all of the attributes go.  There are also some higher level attributes which TM adds, like createDate, updateDate, and creator which might be of some use, but for the most part, everything you need is under \"properties\".  \n\n\nHere you see name, image_url, and we'll use \"caption\" instead of \"description.\"  Note that the \"name\" attribute on the place is what gets filled in the text box when you edit a place, and the \"description\" is filled in by the text editor.  The other attributes you can edit when on the place edit page are \"icon\", \"icon_size\", and \"color\".  Note that these correspond to the 5 html form elements that you see on every place edit page (this is because the most basic, default, mode for a TM collection is simply making and editing markers - if you make custom theming functions, these form elements will disappear because they aren't needed anymore).\n\n\n{\n  \n_id\n: \n7yqXaYKi3ZbaLCemM\n,\n  \ngeometry\n: {\n    \ntype\n: \nPoint\n,\n    \ncoordinates\n: [\n      -122.429913,\n      37.766286\n    ]\n  },\n  \ntype\n: \nFeature\n,\n  \nbbox\n: {\n    \ntype\n: \nPoint\n,\n    \ncoordinates\n: [\n      -122.429913,\n      37.766286\n    ]\n  },\n  \nproperties\n: {\n    \ndescription\n: \n,\n    \ncolor\n: \n#63d7b2\n,\n    \nname\n: \n2175 Market\n,\n    \ncaption\n: \nFormerly a 76 gas station, 2175 Market will bring new housing units to transit-heavy Market Street. It will include 88 one- and two-bedroom units spread out over six stories. The development will also add 7,300 square feet of ground floor-retail along Market. \n,\n    \nimage_url\n: \nhttp://cdn.cstatic.net/images/gridfs/51f008c6f92ea172190269bf/2175 Market Rendering - Corner.jpg\n,\n    \nurl\n: \nhttp://www.2175market.com\n,\n    \naddress\n: \n2175 Market Street, San Francisco, CA 94114, USA\n,\n    \nicon_size\n: \nm\n,\n    \nicon\n: \nbuilding\n\n  },\n  \ncreatorUID\n: \nx2nRy8FNcpG32By4k\n,\n  \ncreator\n: \nFletcher Foti\n,\n  \ncreateDate\n: \n2015-06-20T06:19:29.957Z\n,\n  \nupdateDate\n: \n2015-06-20T06:19:29.957Z\n,\n  \ncollectionId\n: \necGPcWi4XRDvMHLSp\n\n}  \n\n\n\n\nTemplates\n\n\nTemplates are how you turn JSON to HTML.  Your web browser visualizes only HTML but JSON is the data which \"backs\" the HTML.  For instance, we'll want to format and display the name as a header, the description as normal text, and the image_url as an image.  You can see the actual collection we're trying to create \nhere\n.\n\n\nThe first template that we can configure is the \"Place Template (for Place Detail)\".  This is the template that is used on the place page.  The actual template for the collection above is shown here.  Here we're substituting in the name, url, image_url, and caption properties into a small html snippet.\n\n\nThe name is rendered as header, the url as a link, caption as normal text, and the image url as an image.  It's pretty much that simple.  Note that the double curly braces mean to substitute that attribute as text and the triple curly braces mean that attribute is \nalready\n html and should be rendered as html.\n\n\nKeep in mind that each template has a \"test\" button that allows you to test the template on a randomly chosen place to see what it looks like.\n\n\nh2\n{{properties.name}}\n/h2\n\n\n{{#if properties.url}}\n\na href=\n{{properties.url}}\n target=\n_blank\nView on Curbed\n/a\n\n\nbr\nbr\n\n{{/if}}\n\n{{{properties.caption}}}\n\n\nbr\nbr\n\n\n\nimg src=\n{{properties.image_url}}\n style=\nwidth: 100%;\n\n\nbr\nbr\n\n\n\n\n\nThat's really all you need to know to make a nicely formatted page, and a place page created by this template is shown below.  If you're an intermediate to advanced web programmer, you should know that these templates are rendered with \nhandlebars.js\n which is a very powerful templating library, and everything it can do TM can do.\n\n\nThe user also controls the template for the \"Place List\" which is the list of places below the collection description, and the one for our sample collection looks like this:\n\n\nh4\n{{properties.name}}\n/h4\n\n\n{{#if properties.url}}\n\na href=\n{{properties.url}}\n target=\n_blank\nView on Curbed\n/a\n\n\nbr\nbr\n\n{{/if}}\n\n{{{properties.caption}}}\n\n\nbr\nbr\n\n\n\nimg src=\n{{properties.image_url}}\n style=\nwidth: 300px;\n\n\nbr\nbr\n\n\n\n\n\nThis is almost the same template as the place detail template except that the name is rendered with a small header (h4 instead of h2) and the image is not as wide to make scrolling easier.\n\n\nThe final template is for the label that pops up when you mouse over a place.  The one for our sample collection looks like this:\n\n\nh4\n{{properties.name}}\n/h4\n\n\nimg src=\n{{properties.image_url}}\n style=\nwidth: 100px;\n\n\nbr\n\n\n\n\n\nShort and sweet.  The popup doesn't have much room, so we display the name and a thumbnail version of the image.  That's it, there's nothing more to it.\n\n\nAutoform\n\n\nNow let's assume your friend didn't send you a shapefile that had shapes and attributes and you need to create that information directly in TM.  We already know how to make the shapes from the discussion on \nAdding Places\n.  What's new in this section is how your users can easily enter attributes on TM, which we do using HTML forms. \n\n\nTM does this using the \nAutoform\n package from the Meteor framework.  Using this package you no longer have to painstakingly write the HTML by hand, you just configure the form with a JSON spec and TM will take care of rendering the form.  \n\n\nFor instance, let's say you want to record the number of residential units (a number), the number of non-residential square feet (another number), and a drop down for \"has bike parking\" which can take the values of yes, no, and maybe.  No problem.  The code to create that form is shown below, which includes some extra formatting information for how to label each element in the form, and to make sure we don't allow negative numbers for the counts we want to record.  \n\n\nThere's actually quite a bit more configuration that can be done with autoform, and we suggest you go directly to the \nautoform playground\n to build your form on their website.  You can then copy the JSON back to the text area on TM and we will add a form on \nthe edit page\n for every place to collect attributes about that place.  These attributes can then be rendered in the HTML templates described above, or the themes described below, or even exported into a shapefile for further analysis outside of TM.\n\n\n{\n  residentialUnits: {\n    label: \nNumber of residential units in development:\n,\n    type: \nNumber\n,\n    min: 0\n  },\n  nonResidentialSqft: {\n    label: \nNumber of non-res square footage:\n,\n    type: \nNumber\n,\n    min: 0\n  },\n  hasBikeParking: {\n    type: \nString\n,\n    label: \nHas bike parking:\n,\n    allowedValues: [\n       \nYes\n, \nNo\n, \nDon't know\n\n    ]\n  }\n}\n\n\n\n\n\n...which creates the form that looks like this:\n\n\n\n\n...and can be seen in action on \nthis\n collection.\n\n\nTheming Functions\n\n\nNow let's say your friend sent you a shapefile with some numbers already entered (probably the old way, using some desktop GIS tool), and these numbers represent new buildings in San Francisco.  The buildings can be office buildings, residential buildings, and can vary in size from just a few townhomes to hundreds and hundreds of upscale condos.  \n\n\nIn fact, with web maps we can change the size of markers, the colors, and the icons, and our goal is to make each building show up on a web map as a marker with a certain \"theme\" - in other words, we want to map certain attributes in the shapefile to certain traits of the markers.  \n\n\nWe do that in TM with \"theming functions\" which are next in the collection edit page.  There is a theming function for the icon (the picture that's inside the marker), the marker size, and the color for the marker (click the buttons above the text area to specify each function).  Theming functions are actual Javascript functions so are the only thing that's actual code in TM.  Still, Javascript is a pretty easy language to use so it shouldn't be too challenging to get through the basics.\n\n\nAs an example, we're trying to build the theme shown in the screenshot below.  This is available as a live demo \nhere\n.  This data is the actual development pipeline provided by the San Francisco Planning Department for late 2012 and early 2013.\n\n\n\n\nFirst we specify the icon.  TM uses the Maki icons which are described (and can be searched) \nhere\n.  All you have to do to specify the icon is to return the name of one of the icons that's shown at the link above.  In this example, we want to to use the icon for \"building\" when there are residential units and \"commercial\" when there are not.\n\n\nTo do this we use the ternary (question mark) operator in Javascript.  Note that in our functions the variable \"p\" is set to the \"properties\" dictionary we discussed above (the one that contains the attributes we always care about).  What this code says is that if the attribute \"Units\" is greater than zero, return the string \"building\", otherwise return \"commercial\", and TM takes care of the rest for you.\n\n\nTwo things to remember since this is Javascript.  First, it's very easy to create errors because this is relatively free-form coding, and second, you can open the console in the Chrome browser to see those errors and get a hint as to what you might be doing wrong.  Since this is coding, you won't get it right the first time and will have to hone in on the desired behavior by trial and error.  We promise we will make this easier in the future, but until then I feel confident you can do it!\n\n\nRemember that you have to refresh the page in order to re-render the markers, so for every change you make in the theming functions you will need to refresh to see the results.\n\n\nreturn p.Units \n 0 ? \nbuilding\n : \ncommercial\n;\n\n\n\n\nNext comes icon size.  This function must return one of the strings 's', 'm', and 'l' for small, medium, and large markers respectively.  Yep, that's all there is to it.  The function below returns 'l' when Units is greater than 80 or when the TotalSqftEstim attribute is greater than 150k.  I think this code should be fairly easy to understand once you understand that \"||\" means \"or\" in Javascript.\n\n\nif(p.Units \n 80 || p.TotalSqftEstim \n 150000) return 'l';\nif(p.Units \n 30 || p.TotalSqftEstim \n 25000) return 'm';\nreturn 's';\n\n\n\n\nNext is the icon color function.  This is very similar to the others but returns a color value.  These colors can be hex numbers - you can search Google for a hex \"color picker\" or use your favorite from the web and just copy the value in here.  It can also return simple colors like \"blue\", \"red\", \"yellow\", etc, but these colors are less nuanced obviously.\n\n\nThis function says, first check if there are no residential units, if so return a blue color.  After that we know that the building is residential, but if it \nalso\n contains commercial (the next line), we return purple.  Then if it's a \nlarge\n building return red and otherwise return yellow.  And that's how we choose the colors you see in the image above.\n\n\nThe one thing worth noting on this example is that you can use the \np.Units\n notation if the attribute doesn't have weird characters in it, but you have to use \np['WHATEVER']\n notation if it does, which is why we have to do \np['Total GSF (Commercial)']\n.  Otherwise you should have seen all this before.\n\n\nif(!p.Units) return '544FDB';\nif(p['Total GSF (Commercial)'] \n 500) return '9D28E0';\nreturn p.Units \n 120 ? 'E02850' : 'E0DD28';\n\n\n\n\nThat's pretty much it.  With the above configuration, you can do pretty much anything in TM - you can record information from your users, you can use that data to theme the map, and you can use the same data to make html templates in the place detail view, the place list view, and the labels.  Please feel free to ask questions - we'd love to help!\n\n\nDrop Markers\n\n\nThere are a few other on/off attributes in the collection edit view that will be discussed briefly here.  \"Drop markers\" can be turned on for an effect that drops the markers from the sky in animated fashion whenever markers are added to the map.  This is a question of taste though, so is user configuratble.\n\n\nTurning off the Geoindex\n\n\nThe \"geoindex\" can also be turned on and off.  The geoindex is the functionality that limits the places that are loaded to only those shown in the map view.  If you had hundreds of thousands of city markers worldwide, you would just want to load the few cities that are in the map view, so this is turned on by default.  If you have less than a hundred places or so, it's usually fine to turn this off, which loads all the places in the collection immediately and can be handy for subsequent responsiveness and also so that all the places are in the list view all the time which is perhaps easier for users to understand on small collections.  At any rate, it's up to the collection owner how they choose to set this.", 
            "title": "Customization"
        }, 
        {
            "location": "/customization/#customization", 
            "text": "All the customization discussed here will be made on the collection settings page, which can be reached by clicking the \"Edit\" icon on the collection page.  The \"Edit\" icon will only be avialable if you have owner permissions on the collection.  Once you're on the \"Edit\" page you will need to click the down arrow at the bottom of the page to get to the expert settings discussed here.  As a word of warning, a modest amount of programming is requried to customize the templates in TogetherMap.  As you will soon see, some of the basics can be done with modest amount of programming knowledge, and with the framework described here you can do some very powerful things in TM.", 
            "title": "Customization"
        }, 
        {
            "location": "/customization/#shapefiles", 
            "text": "Shapefiles are the lifeblood of GIS.  Although TM isn't GIS, we can start with shapefiles because shapefiles are the most common way to 1) define a shape and 2) associate attributes with a shape.  In our example, let's say we have a set of shapes, each of which has a name, description, and image url.  It's worth digressing here to point out that executing a couple of provided Python scripts is the easiest way to get shapefiles into and out of TM (and is required for large shapefiles).  This is documented on the  GitHub Page .", 
            "title": "Shapefiles"
        }, 
        {
            "location": "/customization/#json", 
            "text": "Instead of shapefiles, the vernacular of the web is JSON.  JSON is essentially a Javascript object which is a key value dictionary that is human readable.  For our example, you need only deal with one object at a time.  TogetherMap takes care of reading the places from the database, synchronizing updates between users and many other things.  Here is a sample place.  {\n    shape: [-37.7792, 122.4191],\n    name:  San Francisco City Hall ,\n    description:  This is the City Hall of SF ,\n    image_url:  http://imgur.com/ABCD \n}", 
            "title": "JSON"
        }, 
        {
            "location": "/customization/#geojson", 
            "text": "OK, that's easy enough, but what about the shape arribute?  In fact, there is a whole specification for representing shapes in JSON called  GeoJSON  and this is the preferred way to represent shapes on the web rather than shapefiles.  TM uses GeoJSON.  With TM, you will never, ever have to know how shapes are stored.  TM does this for you.  You only need to know how to turn the attributes into text or into marker themes.", 
            "title": "GeoJSON"
        }, 
        {
            "location": "/customization/#json-in-tm", 
            "text": "Let's imagine a coworker sent you a shapefile and you imported it into TM.  You don't even really know what attributes are in the shapefile.  Worry not.  Once the data is in TM, that is now our problem.  Under the first text area is a button with a \"code\" icon on it.  Click it and it will give you a formatted sample object from this collection.  One is printed below so that you won't be too worried when you see a place with it's full complexity.    So what do you need to know about this?  Not as much as you'd think.  The magic is all in the \"properties\" sub-dictionary, and you will see \"properties\" come up a lot in TM templates.  \"properties\" is part of the GeoJSON spec and allows us to conform with existing conventions - this is where all of the attributes go.  There are also some higher level attributes which TM adds, like createDate, updateDate, and creator which might be of some use, but for the most part, everything you need is under \"properties\".    Here you see name, image_url, and we'll use \"caption\" instead of \"description.\"  Note that the \"name\" attribute on the place is what gets filled in the text box when you edit a place, and the \"description\" is filled in by the text editor.  The other attributes you can edit when on the place edit page are \"icon\", \"icon_size\", and \"color\".  Note that these correspond to the 5 html form elements that you see on every place edit page (this is because the most basic, default, mode for a TM collection is simply making and editing markers - if you make custom theming functions, these form elements will disappear because they aren't needed anymore).  {\n   _id :  7yqXaYKi3ZbaLCemM ,\n   geometry : {\n     type :  Point ,\n     coordinates : [\n      -122.429913,\n      37.766286\n    ]\n  },\n   type :  Feature ,\n   bbox : {\n     type :  Point ,\n     coordinates : [\n      -122.429913,\n      37.766286\n    ]\n  },\n   properties : {\n     description :  ,\n     color :  #63d7b2 ,\n     name :  2175 Market ,\n     caption :  Formerly a 76 gas station, 2175 Market will bring new housing units to transit-heavy Market Street. It will include 88 one- and two-bedroom units spread out over six stories. The development will also add 7,300 square feet of ground floor-retail along Market.  ,\n     image_url :  http://cdn.cstatic.net/images/gridfs/51f008c6f92ea172190269bf/2175 Market Rendering - Corner.jpg ,\n     url :  http://www.2175market.com ,\n     address :  2175 Market Street, San Francisco, CA 94114, USA ,\n     icon_size :  m ,\n     icon :  building \n  },\n   creatorUID :  x2nRy8FNcpG32By4k ,\n   creator :  Fletcher Foti ,\n   createDate :  2015-06-20T06:19:29.957Z ,\n   updateDate :  2015-06-20T06:19:29.957Z ,\n   collectionId :  ecGPcWi4XRDvMHLSp \n}", 
            "title": "JSON in TM"
        }, 
        {
            "location": "/customization/#templates", 
            "text": "Templates are how you turn JSON to HTML.  Your web browser visualizes only HTML but JSON is the data which \"backs\" the HTML.  For instance, we'll want to format and display the name as a header, the description as normal text, and the image_url as an image.  You can see the actual collection we're trying to create  here .  The first template that we can configure is the \"Place Template (for Place Detail)\".  This is the template that is used on the place page.  The actual template for the collection above is shown here.  Here we're substituting in the name, url, image_url, and caption properties into a small html snippet.  The name is rendered as header, the url as a link, caption as normal text, and the image url as an image.  It's pretty much that simple.  Note that the double curly braces mean to substitute that attribute as text and the triple curly braces mean that attribute is  already  html and should be rendered as html.  Keep in mind that each template has a \"test\" button that allows you to test the template on a randomly chosen place to see what it looks like.  h2 {{properties.name}} /h2 \n\n{{#if properties.url}} a href= {{properties.url}}  target= _blank View on Curbed /a  br br \n{{/if}}\n\n{{{properties.caption}}} br br  img src= {{properties.image_url}}  style= width: 100%;  br br   That's really all you need to know to make a nicely formatted page, and a place page created by this template is shown below.  If you're an intermediate to advanced web programmer, you should know that these templates are rendered with  handlebars.js  which is a very powerful templating library, and everything it can do TM can do.  The user also controls the template for the \"Place List\" which is the list of places below the collection description, and the one for our sample collection looks like this:  h4 {{properties.name}} /h4 \n\n{{#if properties.url}} a href= {{properties.url}}  target= _blank View on Curbed /a  br br \n{{/if}}\n\n{{{properties.caption}}} br br  img src= {{properties.image_url}}  style= width: 300px;  br br   This is almost the same template as the place detail template except that the name is rendered with a small header (h4 instead of h2) and the image is not as wide to make scrolling easier.  The final template is for the label that pops up when you mouse over a place.  The one for our sample collection looks like this:  h4 {{properties.name}} /h4  img src= {{properties.image_url}}  style= width: 100px;  br   Short and sweet.  The popup doesn't have much room, so we display the name and a thumbnail version of the image.  That's it, there's nothing more to it.", 
            "title": "Templates"
        }, 
        {
            "location": "/customization/#autoform", 
            "text": "Now let's assume your friend didn't send you a shapefile that had shapes and attributes and you need to create that information directly in TM.  We already know how to make the shapes from the discussion on  Adding Places .  What's new in this section is how your users can easily enter attributes on TM, which we do using HTML forms.   TM does this using the  Autoform  package from the Meteor framework.  Using this package you no longer have to painstakingly write the HTML by hand, you just configure the form with a JSON spec and TM will take care of rendering the form.    For instance, let's say you want to record the number of residential units (a number), the number of non-residential square feet (another number), and a drop down for \"has bike parking\" which can take the values of yes, no, and maybe.  No problem.  The code to create that form is shown below, which includes some extra formatting information for how to label each element in the form, and to make sure we don't allow negative numbers for the counts we want to record.    There's actually quite a bit more configuration that can be done with autoform, and we suggest you go directly to the  autoform playground  to build your form on their website.  You can then copy the JSON back to the text area on TM and we will add a form on  the edit page  for every place to collect attributes about that place.  These attributes can then be rendered in the HTML templates described above, or the themes described below, or even exported into a shapefile for further analysis outside of TM.  {\n  residentialUnits: {\n    label:  Number of residential units in development: ,\n    type:  Number ,\n    min: 0\n  },\n  nonResidentialSqft: {\n    label:  Number of non-res square footage: ,\n    type:  Number ,\n    min: 0\n  },\n  hasBikeParking: {\n    type:  String ,\n    label:  Has bike parking: ,\n    allowedValues: [\n        Yes ,  No ,  Don't know \n    ]\n  }\n}  \n...which creates the form that looks like this:   ...and can be seen in action on  this  collection.", 
            "title": "Autoform"
        }, 
        {
            "location": "/customization/#theming-functions", 
            "text": "Now let's say your friend sent you a shapefile with some numbers already entered (probably the old way, using some desktop GIS tool), and these numbers represent new buildings in San Francisco.  The buildings can be office buildings, residential buildings, and can vary in size from just a few townhomes to hundreds and hundreds of upscale condos.    In fact, with web maps we can change the size of markers, the colors, and the icons, and our goal is to make each building show up on a web map as a marker with a certain \"theme\" - in other words, we want to map certain attributes in the shapefile to certain traits of the markers.    We do that in TM with \"theming functions\" which are next in the collection edit page.  There is a theming function for the icon (the picture that's inside the marker), the marker size, and the color for the marker (click the buttons above the text area to specify each function).  Theming functions are actual Javascript functions so are the only thing that's actual code in TM.  Still, Javascript is a pretty easy language to use so it shouldn't be too challenging to get through the basics.  As an example, we're trying to build the theme shown in the screenshot below.  This is available as a live demo  here .  This data is the actual development pipeline provided by the San Francisco Planning Department for late 2012 and early 2013.   First we specify the icon.  TM uses the Maki icons which are described (and can be searched)  here .  All you have to do to specify the icon is to return the name of one of the icons that's shown at the link above.  In this example, we want to to use the icon for \"building\" when there are residential units and \"commercial\" when there are not.  To do this we use the ternary (question mark) operator in Javascript.  Note that in our functions the variable \"p\" is set to the \"properties\" dictionary we discussed above (the one that contains the attributes we always care about).  What this code says is that if the attribute \"Units\" is greater than zero, return the string \"building\", otherwise return \"commercial\", and TM takes care of the rest for you.  Two things to remember since this is Javascript.  First, it's very easy to create errors because this is relatively free-form coding, and second, you can open the console in the Chrome browser to see those errors and get a hint as to what you might be doing wrong.  Since this is coding, you won't get it right the first time and will have to hone in on the desired behavior by trial and error.  We promise we will make this easier in the future, but until then I feel confident you can do it!  Remember that you have to refresh the page in order to re-render the markers, so for every change you make in the theming functions you will need to refresh to see the results.  return p.Units   0 ?  building  :  commercial ;  Next comes icon size.  This function must return one of the strings 's', 'm', and 'l' for small, medium, and large markers respectively.  Yep, that's all there is to it.  The function below returns 'l' when Units is greater than 80 or when the TotalSqftEstim attribute is greater than 150k.  I think this code should be fairly easy to understand once you understand that \"||\" means \"or\" in Javascript.  if(p.Units   80 || p.TotalSqftEstim   150000) return 'l';\nif(p.Units   30 || p.TotalSqftEstim   25000) return 'm';\nreturn 's';  Next is the icon color function.  This is very similar to the others but returns a color value.  These colors can be hex numbers - you can search Google for a hex \"color picker\" or use your favorite from the web and just copy the value in here.  It can also return simple colors like \"blue\", \"red\", \"yellow\", etc, but these colors are less nuanced obviously.  This function says, first check if there are no residential units, if so return a blue color.  After that we know that the building is residential, but if it  also  contains commercial (the next line), we return purple.  Then if it's a  large  building return red and otherwise return yellow.  And that's how we choose the colors you see in the image above.  The one thing worth noting on this example is that you can use the  p.Units  notation if the attribute doesn't have weird characters in it, but you have to use  p['WHATEVER']  notation if it does, which is why we have to do  p['Total GSF (Commercial)'] .  Otherwise you should have seen all this before.  if(!p.Units) return '544FDB';\nif(p['Total GSF (Commercial)']   500) return '9D28E0';\nreturn p.Units   120 ? 'E02850' : 'E0DD28';  That's pretty much it.  With the above configuration, you can do pretty much anything in TM - you can record information from your users, you can use that data to theme the map, and you can use the same data to make html templates in the place detail view, the place list view, and the labels.  Please feel free to ask questions - we'd love to help!", 
            "title": "Theming Functions"
        }, 
        {
            "location": "/customization/#drop-markers", 
            "text": "There are a few other on/off attributes in the collection edit view that will be discussed briefly here.  \"Drop markers\" can be turned on for an effect that drops the markers from the sky in animated fashion whenever markers are added to the map.  This is a question of taste though, so is user configuratble.", 
            "title": "Drop Markers"
        }, 
        {
            "location": "/customization/#turning-off-the-geoindex", 
            "text": "The \"geoindex\" can also be turned on and off.  The geoindex is the functionality that limits the places that are loaded to only those shown in the map view.  If you had hundreds of thousands of city markers worldwide, you would just want to load the few cities that are in the map view, so this is turned on by default.  If you have less than a hundred places or so, it's usually fine to turn this off, which loads all the places in the collection immediately and can be handy for subsequent responsiveness and also so that all the places are in the list view all the time which is perhaps easier for users to understand on small collections.  At any rate, it's up to the collection owner how they choose to set this.", 
            "title": "Turning off the Geoindex"
        }
    ]
}